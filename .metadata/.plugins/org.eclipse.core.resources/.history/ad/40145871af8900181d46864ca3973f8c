package DataStructure.core;



public class OrderedLinkedList<T>  implements Comparable<T>{
	
	Node<T>  head = null;
public void add(T item)
{  Node<T> nptr = new Node(item);
if(head == null)
{  
	head = nptr;
	}

	}
public boolean search(T item)
{ 
	Node<T> ptr = head;
	if( compareTo(ptr.data)>0)
	{
		return false;
	}
	else
	{
		for(int i=0;i<size()-1;i++)
		{
			if(ptr.data.equals( item))
				return true;
		}
		return false;
	}
	}
public boolean isEmpty()
{ if(head == null)
	return true;
else
	return false;
	}
public int size()
{  int size = 0;
	Node<T> ptr = head;
	if(head == null)
return 0;
	else{
	while(ptr!=null)
		size++;
	return size;
	}
	
	}
private class  Node<T>{
	private T data;
	private Node<T> next;
	
	public Node(T a)
	{
		data =a;
		next = null;
	}

}
@Override
public int compareTo(T item) {
	// TODO Auto-generated method stub
	if(this.data>item.data)
		return -1;
	else
		return 1;
	return 0;
}

}
