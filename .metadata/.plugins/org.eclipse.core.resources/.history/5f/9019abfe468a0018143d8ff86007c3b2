package DataStructure.core;

import java.util.Comparator;

public class OrderedLinkedList<T  extends Comparable<T>>  {
	
	Node<T>  head = null;
public void add(T item)
{  Node<T> nptr = new Node(item);
Node<T> ptr = head,prev = null;
if(head == null)
{  System.out.print("fdfddgf");
	head = nptr;
	return;
	}
if(size() == 1){
if(compare(head.data,nptr.data)>0)
{
	nptr.next = head;
	head = nptr;
	return;
	}
else
{
	head.next = nptr;
	return;
	}
}
else
{

	while(compare(nptr.data,ptr.data)>0 )
	{
		prev = ptr;
		ptr = ptr.next;
	}
	prev.next = nptr;
	nptr.next = ptr;
		}
}
	
public void print()
{
Node<T> ptr = head;
if(head == null)
	return;
while(ptr != null){
	System.out.println(ptr.data + " ->");
	ptr = ptr.next;
}

	}
public boolean search(T item)
{ 
	Node<T> ptr = head;
	if( compare(head.data, item)>0)
	{
		return false;
	}
	else
	{
		for(int i=0;i<size()-1;i++)
		{
			if(ptr.data.equals( item))
				return true;
		}
		return false;
	}
	}
public boolean isEmpty()
{ if(head == null)
	return true;
else
	return false;
	}
public int size()
{  int size = 0;
	Node<T> ptr = head;
	if(head == null)
return 0;
	else{
	while(ptr!=null)
		size++;
	return size;
	}
	
	}
private class  Node<T >{
	private T data;
	private Node<T> next;
	
	public Node(T a)
	{
		this.data =a;
		next = null;
	}

}
public static <T extends Comparable<T>> int compare(T one, T two){
	return one.compareTo(two);
}



}
